upstream local_{{app_name}}_tornados {
    server 127.0.0.1:8088 max_fails=3 fail_timeout=10s;
}

upstream prod_{{app_name}}_tornados {
    server 127.0.0.1:8100 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:8101 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:8102 max_fails=3 fail_timeout=10s;
}

log_format {{app_name}} '[$time_local] $remote_addr $remote_user $host "$request" $status $bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio" $request_time';

charset utf-8;
add_header Strict-Transport-Security max-age=63072000;
client_max_body_size 3M;

ssl_session_timeout 5m;
ssl_session_cache shared:SSL:10m;
ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256";

proxy_set_header X-Real-IP $remote_addr;
proxy_set_header Host $host;
proxy_connect_timeout 8;
proxy_send_timeout 8;
proxy_read_timeout 8;
proxy_next_upstream error timeout;
proxy_intercept_errors on;
# Work around "upstream sent too big header while reading response header from upstream" error in nginx
proxy_buffer_size 8k;
proxy_buffers 32 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;
